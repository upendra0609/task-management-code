package com.sikku.userservice.security;

public UserService userService;
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(request -> request.requestMatchers("/api/v1/auth/**")
                        .permitAll().anyRequest().authenticated())
                .sessionManagement(manager -> manager.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authenticationProvider(authenticationProvider()).addFilterBefore(
                        jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
        
//        http.cors(cors -> {
//			CorsConfigurationSource configurationSource = req -> {
//				CorsConfiguration corsConfiguration = new CorsConfiguration();
//				corsConfiguration.setAllowedOrigins(List.of("http://localhost:5173", "https://upendra0609.github.io/task-management/"));
//				corsConfiguration.setAllowedMethods(List.of("*"));
//				corsConfiguration.setAllowCredentials(true);
//				corsConfiguration.setAllowedHeaders(List.of("*", ""));
//				corsConfiguration.setExposedHeaders(List.of("Authorization"));
//				corsConfiguration.setMaxAge(3600L);
//				return corsConfiguration;
//			};
//			cors.configurationSource(configurationSource);
//		});

		http.securityContext(context -> context.requireExplicitSave(true));
        
        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userService.userDetailsService());
        authProvider.setPasswordEncoder(passwordEncoder());
        return authProvider;
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config)
            throws Exception {
        return config.getAuthenticationManager();
    }
}